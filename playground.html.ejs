<!doctype html>
<%_ /*
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons
    naming 3.0 unported license.
    See https://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/ _%>
<html lang="en">
    <!--region head-->
    <head>
        <meta charset="utf-8">
        <!--Prevent browser caching-->
        <meta http-equiv="cache-control" content="no-cache">
        <meta http-equiv="expires" content="0">
        <meta http-equiv="pragma" content="no-cache">
        <title>playground</title>

        <link rel="stylesheet" href="/react-input-material/index.styles.css">
        <link rel="stylesheet" href="/@material/slider/dist/mdc.slider.css">
        <!--region tabs-->
        <link rel="stylesheet" href="/@material/tab-bar/dist/mdc.tab-bar.css">
        <link rel="stylesheet" href="/@material/tab/dist/mdc.tab.css">
        <link rel="stylesheet" href="/@material/tab-scroller/dist/mdc.tab-scroller.css">
        <link rel="stylesheet" href="/@material/tab-indicator/dist/mdc.tab-indicator.css">
        <link rel="stylesheet" href="/@material/ripple/dist/mdc.ripple.css">
        <link rel="stylesheet" href="/@rmwc/icon/icon.css">
        <!--endregion-->
        <!--region style-->
        <style>
            file-input, generic-input {
                display: block;
                margin-bottom: 20px;
            }

            .playground__tab.hide {
                display: none;
            }

            .playground__inputs {
                float: left;
                width: 50%;
            }

            .playground__inputs__generic-animate .generic-animate-appear-active,
            .playground__inputs__generic-animate .generic-animate-enter-active,
            .playground__inputs__generic-animate .generic-animate-exit-active {
                transition: opacity 2000ms ease-in !important;
            }

            .playground__outputs {
                height: -webkit-fill-available;
                width: 50%;
                overflow: auto;
                position: fixed;
                right: 0;
                top: 0;
            }

            <%-
                require('material-icons/iconfont/material-icons.css')
                    .replace(
                        /(url\()"?(?:\.\/)?(material-icons\.[^.")]+)"?(\))/g,
                        '$1material-icons/iconfont/$2$3'
                    )
            %>
        </style>
        <!--endregion-->
        <!--region polyfill-->
        <%-
            include(
                'web-component-wrapper/polyfill.html',
                {additionalFeatures: [
                    /*
                        Most polyfills are determined via
                        "create-polyfill-service-url" subracted by already
                        includes one due to "web-component-wrapper".
                    */
                    // Asynchronous suggestion creator.
                    'AbortController',
                    'Array.prototype.every',
                    'Array.prototype.forEach',
                    'Array.prototype.indexOf',
                    'Array.prototype.lastIndexOf',
                    'Array.prototype.reduce',
                    'Array.prototype.some',
                    'Array.prototype.sort',
                    'Blob',
                    'Date.prototype.toISOString',
                    'globalThis',
                    'Intl',
                    'Object.create',
                    'Object.getOwnPropertyNames',
                    'Object.getPrototypeOf',
                    'Symbol.prototype.description'
                ]}
            )
        %>
        <!--endregion-->
        <!--region script-->
        <script>
            window.onload = function() {
                const components = webInputMaterial.index.components
                const Tools = webInputMaterial.clientnode.Tools
                const GenericInput = components.GenericInput.component.content

                GenericInput.locales.push('de-DE')
                GenericInput.transformer.currency.format.final.options =
                    {currency: 'EUR'}

                Object.values(components).map(function(component) {
                    component.register()
                })

                // region tabs
                const tabs = Tools.arrayMake(document.querySelectorAll(
                    '.playground__tab'
                ))
                const showTab = function(currentIndex) {
                    tabs.forEach(function(tab) {
                        if (tab === tabs[currentIndex]) {
                            if (tab.getAttribute('class').includes(' hide'))
                                tab.setAttribute(
                                    'class',
                                    tab.getAttribute('class')
                                        .replace(' hide', '')
                                )
                        } else if (
                            !tab.getAttribute('class').includes(' hide')
                        )
                            tab.setAttribute(
                                'class', tab.getAttribute('class') + ' hide'
                            )
                    })
                }
                const tabBar =
                    document.querySelector('.playground__inputs__tab-bar')
                tabBar.addEventListener(
                    'activate',
                    function(event) {
                        // NOTE: "event.detail" is sometimes set to "0" in IE11.
                        if (event.detail)
                            showTab(event.detail.parameters[0].detail.index)
                    }
                )
                // endregion
                // region inputs
                // NOTE: Wait until all inputs have stabilized.
                Tools.timeout(function() {
                    Tools.arrayMake(document.querySelectorAll('[is-root][name]'))
                        .forEach(function(domNode) {
                            domNode.addEventListener(
                                'change',
                                function(event) {
                                    if (event.target === domNode)
                                        Tools.timeout(function() {
                                            document.querySelector('pre')
                                                .innerHTML = Tools.represent(
                                                    event.detail.parameters[0]
                                                        .model ||
                                                    event.detail.parameters[0]
                                                )
                                        })
                                }
                            )
                        })
                })
                // endregion
                // region animation
                const animationDomNodes = Tools.arrayMake(
                    document.querySelectorAll('generic-animate')
                )
                let intervalID = null
                tabBar.addEventListener(
                    'activate',
                    function(event) {
                        // NOTE: "event.detail" is sometimes set to "0" in IE11.
                        if (!event.detail)
                            return

                        if (intervalID !== null) {
                            clearInterval(intervalID)
                            intervalID = null
                        }

                        if (
                            tabs[event.detail.parameters[0].detail.index]
                                .getAttribute('class')
                                .includes('playground__inputs__generic-animate')
                        )
                            intervalID = setInterval(
                                function() {
                                    animationDomNodes.forEach(function(domNode) {
                                        domNode.in = !domNode.in
                                    })
                                },
                                2 * 1000
                            )
                    }
                )
                // endregion
            }
        </script>
        <!--endregion-->
    </head>
    <!--endregion-->
    <body class="no-javascript playground">
        <div class="playground__inputs">
            <!--region tabs-->
            <tab-bar class="playground__inputs__tab-bar">

                <tab-item>circular-spinner</tab-item>
                <tab-item>file-input</tab-item>
                <tab-item>generic-input (with <sup>markup</sup>)</tab-item>
                <tab-item>generic-inputs</tab-item>
                <tab-item>generic-interval</tab-item>
                <tab-item>generic-animate</tab-item>
                <tab-item>requireable-checkbox</tab-item>
                <tab-item>slider-input</tab-item>

            </tab-bar>
            <!--endregion-->
            <!--region circular-spinner-->
            <div class="playground__inputs__circular-spinner playground__tab">
                <circular-spinner></circular-spinner>
                <circular-spinner size="'xlarge'" theme="error">
                </circular-spinner>
                <circular-spinner size="80"></circular-spinner>
            </div>
            <!--endregion-->
            <!--region file-input-->
            <div class="playground__inputs__file-input playground__tab">
                <file-input></file-input>
                <file-input
                    default="{
                        blob: {type: 'image/png'},
                        url: 'https://via.placeholder.com/150'
                    }"
                    name="UnControlled"
                    -generate-file-name-input-properties="function(prototype, properties) {
                        var fileName = properties.value.name || ''

                        return Tools.extend(
                            prototype,
                            {
                                disabled: true,
                                value:
                                    properties.name +
                                    (fileName.includes('.') ?
                                        fileName.substring(
                                            fileName.lastIndexOf('.')
                                        ) :
                                        ''
                                    )
                            }
                        )
                    }"
                >
                    <div bind-attribute-style="
                        'margin-left: 10px' +
                         (options.value && options.value.blob ? '' : ' display: none')
                    ">
                        <span bind-attribute-style="
                            options.value && options.value.blob &&
                            options.value.blob.lastModified ?
                                '' :
                                'display: none'
                        ">
                            <span bind-property-text-content="
                                options.value && options.value.blob &&
                                options.value.blob.lastModified ?
                                    (
                                        'Last modified date time: ' +
                                        Tools.dateTimeFormat(
                                            '${mediumDay}.${mediumMonth}.${fullYear}',
                                            new Date(options.value.blob.lastModified)
                                        )
                                    ) :
                                    ''
                            "></span>
                            <br />
                        </span>

                        <span bind-property-text-content="
                            options.value &&
                            options.value.blob && options.value.blob.type ?
                                ('Mime-Typ: ' + options.value.blob.type) :
                                ''
                        "></span>
                        <br />

                        <span bind-property-text-content="
                            options.value &&
                            options.value.blob && options.value.blob.size ?
                                ('Size: ' + options.value.blob.size) :
                                ''
                        "></span>
                        <br />
                    </div>
                </file-input>
            </div>
            <!--endregion-->
            <!--region generic-input-->
            <div class="playground__inputs__generic-input playground__tab">
                <generic-input
                    bind-on-keydown="console.info('Typed key:', event.key)"
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="This text can be seen initially."
                    name="input1"
                    show-declaration
                ></generic-input>
                <generic-input model="{name: 'input1Model'}"></generic-input>

                <hr/>

                <generic-input
                    default="new Date('2025-01-01T00:00:00.000Z').getTime() / 1000"
                    name="input2"
                    type="date"
                >
                </generic-input>
                <generic-input
                    initial-value="'1970-01-01T08:00:00.000Z'"
                    model="{
                        name: 'input2Model',
                        type: 'time',
                    }"
                    step="60"
                ></generic-input>

                <hr/>

                <generic-input
                    default="120" name="input3" type="datetime-local"
                ></generic-input>
                <generic-input
                    model="{
                        default: new Date(60 * 1000),
                        maximum: 3600,
                        minimum: 60,
                        name: 'input3Model',
                        type: 'time-local'
                    }"
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="Disabled"
                    disabled
                    initial-value="'value4'"
                    name="input4"
                ></generic-input>
                <generic-input
                    model="{
                        declaration: 'Disabled',
                        default: 'value4Model',
                        mutable: false,
                        name: 'input4Model'
                    }"
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="placeholder"
                    name="input5"
                    placeholder="input5"
                    required
                    trailing-icon="'clear_preset'"
                ></generic-input>
                <generic-input
                    default="'value5Model'"
                    icon="'backup'"
                    initial-value="'value5Model'"
                    model="{
                        declaration: 'placeholder',
                        name: 'input5Model',
                        nullable: false
                    }"
                    placholder="input5Model"
                    trailing-icon="'clear_preset'"
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="pattern"
                    description="input6Description"
                    icon="'search'"
                    initial-value="'only a`s allowed'"
                    name="input6"
                    pattern="/a+/"
                    placeholder="input6Placeholder"
                ></generic-input>
                <generic-input
                    initial-value="'has a`s and b`s'"
                    model="{
                        declaration: 'pattern',
                        description: 'input6ModelDescription',
                        regularExpressionPattern: ['.*a+.*', /.*b+.*/]
                    }"
                    name="input6Model"
                    placeholder="input6ModelPlaceholder"
                    trailing-icon="'search'"
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="password"
                    description="input7Description"
                    icon="'search'"
                    initial-value="'hans'"
                    name="passwordInput7"
                    pattern="/a+/"
                    placeholder="input7Placeholder"
                    tooltip="'Please type in your password.'"
                    trailing-icon="'password_preset'"
                ></generic-input>
                <generic-input
                    initial-value="'hans'"
                    model="{
                        declaration: 'password',
                        description: 'input7ModelDescription',
                        regularExpressionPattern: 'a+'
                    }"
                    name="passwordInput7Model"
                    placeholder="input7ModelPlaceholder"
                    trailing-icon="'password_preset'"
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="selection"
                    description="input8Description"
                    initial-value="'A'"
                    labels="[['C', 'LC'], ['D', 'LD'], ['A', 'LA'], ['B', 'LB']]"
                    name="input8"
                    placeholder="input8Placeholder"
                    required
                    selection="['A', 'B', 'C']"
                ></generic-input>
                <generic-input
                    initial-value="'A'"
                    labels="['Label A', 'Label B', 'Label C']"
                    model="{
                        declaration: 'selection',
                        description: 'input8ModelDescription',
                        mutable: false,
                        name: 'input8Model',
                        nullable: false,
                        selection: ['A', 'B', 'C']
                    }"
                    placeholder="input8ModelPlaceholder"
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="selection"
                    description="input9Description"
                    initial-value
                    name="input9"
                    placeholder="input9Placeholder"
                    type="boolean"
                    required
                ></generic-input>
                <generic-input
                    initial-value="false"
                    labels="{true: 'JA', false: 'NEIN'}"
                    model="{
                        declaration: 'selection',
                        description: 'input9ModelDescription',
                        name: 'input9Model',
                        nullable: false,
                        type: 'boolean'
                    }"
                    placeholder="input9ModelPlaceholder"
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="selection"
                    description="input10Description"
                    initial-value
                    labels="{true: 'JA', false: 'NEIN'}"
                    name="input10"
                    required
                ></generic-input>
                <generic-input
                    initial-value="false"
                    labels="{true: 'JA', false: 'NEIN'}"
                    model="{
                        declaration: 'selection',
                        description: 'input10ModelDescription',
                        name: 'input10Model',
                        nullable: false,
                        type: 'boolean'
                    }"
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="selection"
                    description="input11Description"
                    initial-value="'b'"
                    name="input11"
                    selection="{a: 'A', b: 'B', c: 'C'}"
                    required
                ></generic-input>
                <generic-input
                    initial-value="'b'"
                    model="{
                        declaration: 'selection',
                        description: 'input11ModelDescription',
                        name: 'input11Model',
                        nullable: false,
                        selection: {a: 'A', b: 'B', c: 'C'}
                    }"
                ></generic-input>

                <hr/>

                <generic-input
                    description="input12Description"
                    name="input12"
                    placeholder="input12Placeholder"
                    suggest-selection
                    selection="['hans hans', 'peter peter', 'klaus']"
                ></generic-input>
                <generic-input
                    initial-value="'peter'"
                    model="{
                        declaration: 'selection',
                        description: 'input12ModelDescription',
                        name: 'input12Model',
                        nullable: false
                    }"
                    placeholder="input12ModelPlaceholder"
                    search-selection
                    -suggestion-creator="Tools.debounce(function(search) {
                        if (!search.query || search.query.length < 3)
                            return []

                        return Tools.timeout(2000).then(function() {
                            return [
                                'hans with veeeeeeeeeeeeeeeery ' +
                                'loooooooooooooooong second name',
                                'peter',
                                'klaus'
                            ].filter(function(name) {
                                return (
                                    !search.query ||
                                    name.includes(search.query)
                                )
                            })
                        })
                    })"
                ></generic-input>

                <hr/>

                <generic-input
                    description="input13Description"
                    default="'a'"
                    name="input13"
                    placeholder="input13Placeholder"
                    search-selection
                    selection="{a: 'hans', b: 'hans', c: 'klaus'}"
                ></generic-input>
                <generic-input
                    initial-value="'peter'"
                    model="{
                        declaration: 'selection',
                        description: 'input13ModelDescription',
                        name: 'input13Model',
                        nullable: false
                    }"
                    placeholder="input13ModelPlaceholder"
                    suggestion-creator="new Promise(function(resolve) {
                        Tools.timeout(500, function() {
                            var selection = {
                                a: 'hans with veeeeeeeeeeeeeeeery ' +
                                   'loooooooooooooooong second name',
                                b: 'peter',
                                c: 'klaus'
                            }

                            var result = {}
                            for (var key in selection)
                                if (
                                    !options.query ||
                                    selection[key].includes(options.query)
                                )
                                    result[key] = selection[key]
                            resolve(result)
                        })
                    })"
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="text"
                    description="input14Description"
                    initial-value="'a'"
                    name="input14"
                    required
                    rows="3"
                    theme-configuration="{primary: 'yellow', secondary: 'blue'}"
                ></generic-input>
                <generic-input
                    editor="text"
                    initial-value="'a'"
                    model="{
                        declaration: 'text',
                        description: 'input14ModelDescription',
                        name: 'input14Model',
                        nullable: false
                    }"
                    rows="2"
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="code"
                    description="input15Description"
                    disabled
                    editor="code"
                    initial-value="'const value = 2'"
                    name="input15"
                    rows="2"
                    selectable-editor
                ></generic-input>
                <generic-input
                    editor="code"
                    initial-value="'const value = 2'"
                    model="{
                        declaration: 'code',
                        description: 'input15ModelDescription',
                        name: 'input15Model',
                        nullable: false
                    }"
                    rows="6"
                    selectable-editor
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="code"
                    description="input16Description"
                    editor="code"
                    maximum-length="10"
                    name="input16"
                    required
                    rows="2"
                    selectable-editor
                ></generic-input>
                <generic-input
                    editor="code"
                    model="{
                        declaration: 'code',
                        description: 'input16ModelDescription',
                        name: 'input16Model',
                        nullable: false
                    }"
                    rows="6"
                    selectable-editor
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="richtext(raw)"
                    description="input17Description"
                    editor="richtext(raw)"
                    initial-value="'Hello Mr. Smith,<br><br>how are you?'"
                    name="input17"
                    required
                    rows="2"
                    selectable-editor
                ></generic-input>
                <generic-input
                    editor="richtext(simple)"
                    initial-value="'Hello Mr. Smith,<br><br>how are you?'"
                    model="{
                        declaration: 'richtext(simple)',
                        description: 'input17ModelDescription',
                        mutable: false,
                        name: 'input17Model',
                        nullable: false
                    }"
                    rows="6"
                    selectable-editor
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="Number"
                    description="input18Description"
                    maximum="200000"
                    minimum="10"
                    name="input18"
                    placeholder="100000"
                    required
                    type="number"
                ></generic-input>
                <generic-input
                    initial-value="100000"
                    model="{
                        declaration: 'Number',
                        description: 'input18ModelDescription',
                        maximum: 200000,
                        minimum: 10,
                        mutable: false,
                        name: 'input18Model',
                        nullable: false
                    }"
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="Number"
                    description="input19Description"
                    maximum="200000"
                    minimum="10"
                    minimumText="Please at least ${formatValue(minimum)}."
                    name="input19"
                    placeholder="100.000"
                    required
                    type="integer"
                ></generic-input>
                <generic-input
                    initial-value="100000.01"
                    model="{
                        declaration: 'Number',
                        description: 'input19ModelDescription',
                        maximum: 200000,
                        name: 'input19Model',
                        nullable: false,
                        type: 'float'
                    }"
                    transformer="{format: {final: {options: {
                        maximumFractionDigits: 20,
                        minimumFractionDigits: 2
                    }}}}"
                ></generic-input>

                <hr/>

                <generic-input
                    declaration="Number"
                    description="input20Description"
                    maximum="200000"
                    minimum="10"
                    name="input20"
                    placeholder="100.000"
                    required
                    type="currency"
                ></generic-input>
                <generic-input
                    initial-value="100000.01"
                    model="{
                        declaration: 'Number',
                        description: 'input20ModelDescription',
                        maximum: 200000,
                        minimum: 10,
                        name: 'input20Model',
                        nullable: false,
                        type: 'currency'
                    }"
                ></generic-input>
            </div>
            <!--endregion-->
            <!--region generic-inputs-->
            <div class="playground__inputs__generic-inputs playground__tab">
                <generic-inputs
                    create-prototype="Tools.extend(
                        options.item,
                        {name: options.properties.name + '-' + String(options.index + 1)}
                    )"
                    model="{default: [{name: 'inputs1-1'}], name: 'inputs1'}"
                    show-initial-validation-state
                >
                    <file-input bind-properties="options.properties">
                    </file-input>
                </generic-inputs>
                <generic-inputs
                    create-prototype="Tools.extend(
                        options.item,
                        {name: options.properties.name + '-' + String(options.index + 1)}
                    )"
                    maximum-number="2"
                    minimum-number="2"
                    model="{
                        default: [{
                            name: 'inputs2-1',
                            type: 'boolean',
                            value: false
                        }],
                        name: 'inputs2'
                    }"
                    show-initial-validation-state
                >
                    <requireable-checkbox bind-properties="options.properties">
                    </requireable-checkbox>
                </generic-inputs>
                <generic-inputs
                    create-prototype="Tools.extend(
                        options.item,
                        {name: options.properties.name + '-' + String(options.index + 1)}
                    )"
                    model="{
                        default: [{
                            name: 'inputs3-1',
                            type: 'date'
                        }],
                        name: 'inputs3'
                    }"
                    show-initial-validation-state
                >
                    <generic-interval bind-properties="options.properties">
                    </generic-interval>
                </generic-inputs>
                <generic-inputs
                    name="inputs4" value="['first item']"
                ></generic-inputs>
            </div>
            <!--endregion-->
            <!--region generic-interval-->
            <div class="playground__inputs__generic-interval playground__tab">
                <generic-interval
                    end="{default: 240, minimum: 120}"
                    required
                    start="{default: 120, maximum: 3600}"
                    step="60"
                ></generic-interval>
            </div>
            <!--endregion-->
            <!--region generic-animate-->
            <div
                class="playground__inputs__generic-animate playground__tab"
                style="height: 50px"
            >
                <generic-animate in timeout="2000">Fade it!</generic-animate>
                <br/>
                <generic-animate
                    in="false" timeout="2000"
                >Fade it!</generic-animate>
            </div>
            <!--endregion-->
            <!--region requireable-checkbox-->
            <div class="playground__inputs__requireable-checkbox playground__tab">
                <requireable-checkbox></requireable-checkbox>

                <hr/>

                <requireable-checkbox name="checkbox1"></requireable-checkbox>
                <requireable-checkbox
                    model="{name: 'checkbox1Model'}"
                    theme-configuration="{primary: 'yellow', secondary: 'blue'}"
                ></requireable-checkbox>

                <hr/>

                <requireable-checkbox
                    default disabled name="checkbox2" required
                ></requireable-checkbox>
                <requireable-checkbox
                    model="{
                        name: 'checkbox2Model',
                        mutable: false,
                        nullable: false
                    }"
                ></requireable-checkbox>

                <hr/>

                <requireable-checkbox
                    description="checkbox3Description"
                    name="checkbox3"
                    required
                    show-initial-validation-state
                ></requireable-checkbox>
                <requireable-checkbox
                    model="{
                        default: true,
                        description: 'checkbox3ModelDescription',
                        name: 'checkbox3Model',
                        nullable: false
                    }"
                    show-initial-validation-state
                    tooltip="'Check this one!'"
                ></requireable-checkbox>
            </div>
            <!--endregion-->
            <!--region slider-input-->
            <div class="playground__inputs__slider-input playground__tab">
                <slider-input name="sliderInput1"></slider-input>
                <slider-input
                    max="100"
                    min="10"
                    name="sliderInput2"
                    step="2"
                    name="test"
                ></slider-input>
                <slider-input
                    discrete
                    max="100"
                    min="10"
                    name="sliderInput3"
                    step="2"
                    theme-configuration="{secondary: 'red'}"
                    value="66"
                ></slider-input>
                <slider-input
                    discrete
                    displayMarkers
                    max="100"
                    min="10"
                    name="sliderInput4"
                    step="2"
                    value="33"
                ></slider-input>
                <slider-input disabled name="sliderInput5" value="33">
                </slider-input>
            </div>
            <!--endregion-->
        </div>

        <pre class="playground__outputs"></pre>

    </body>
<html>
<%_ /*
    region vim modline
    vim: set tabstop=4 shiftwidth=4 expandtab:
    vim: foldmethod=marker foldmarker=region,endregion:
    endregion
*/ _%>
